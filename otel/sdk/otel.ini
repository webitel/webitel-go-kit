
##################################################
###    [O]pen[Tel]emetry SDK Configuration     ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#general-sdk-configuration

# Disable the SDK for all signals
# Boolean value. If true, a no-op SDK implementation will be used for all telemetry signals.
# Any other value or absence of the variable will have no effect and the SDK will remain enabled.
# This setting has no effect on propagators configured through the OTEL_PROPAGATORS variable.
; OTEL_SDK_DISABLED=true

# Log level used by the SDK logger.
# Accept: debug, info, warn, error
OTEL_LOG_LEVEL=info

# Key-value pairs to be used as resource attributes
# See Resource semantic conventions for details.
# See [Resource SDK](https://opentelemetry.io/docs/specs/otel/resource/sdk/#specifying-resource-information-via-an-environment-variable) for more details.
; OTEL_RESOURCE_ATTRIBUTES=

# Sets the value of the service.name resource attribute
# If service.name is also provided in OTEL_RESOURCE_ATTRIBUTES, then OTEL_SERVICE_NAME takes precedence.
; OTEL_SERVICE_NAME=

# Propagators to be used as a comma-separated list
# Values MUST be deduplicated in order to register a Propagator only once.
; OTEL_PROPAGATORS=tracecontext,baggage

# Sampler to be used for traces
# See [Sampling](https://opentelemetry.io/docs/specs/otel/trace/sdk/#sampling).
; OTEL_TRACES_SAMPLER=parentbased_always_on

# String value to be used as the sampler argument
# The specified value will only be used if OTEL_TRACES_SAMPLER is set.
# Each Sampler type defines its own expected input, if any.
# Invalid or unrecognized input MUST be logged and MUST be otherwise ignored,
# i.e. the implementation MUST behave as if OTEL_TRACES_SAMPLER_ARG is not set.
; OTEL_TRACES_SAMPLER_ARG=

##################################################
###            Exporter Selection              ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#exporter-selection

# Logs exporter to be used. [ otlp, console, none ]
# Accesp: otlpgrpc, otlphttp, stdout, stderr, file:/path/to/logs.otel
OTEL_LOGS_EXPORTER=

# Trace exporter to be used. [ otlp, zipkin, console, none ]
# Accept: otlpgrpc, otlphttp, stdout, stderr, file:/path/to/traces.otel
OTEL_TRACES_EXPORTER=

# Metrics exporter to be used. [ otlp, prometheus, console, none ]
# Accept: otlpgrpc, otlphttp, stdout, stderr, file:/path/to/metrics.otel
OTEL_METRICS_EXPORTER=

##################################################
###             Attribute Limits               ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#attribute-limits

# Maximum allowed attribute value size.
# Default: no limit.
OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT=

# Maximum allowed attribute count
OTEL_ATTRIBUTE_COUNT_LIMIT=128

##################################################
###             LogRecord Limits               ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#logrecord-limits

# Maximum allowed attribute value size.
# Default: no limit.
OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT=

# Maximum allowed log record attribute count
OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT=128

##################################################
###        Standard LogRecord Encoding         ###
##################################################

# Codec to be used for standard output.
# Can be applied while OTEL_LOGS_EXPORTER=[stdout|stderr|file:].
# Accept: text, json, otel
OTEL_LOGRECORD_CODEC=otel

# Colorize, depending on level,
# OTEL_LOGRECORD_CODEC=text records for console output.
OTEL_LOGRECORD_COLOR=false

# Use indentation, pretty print.
# Can be applied while OTEL_LOGRECORD_CODEC=[json|otel].
# Accept: boolean or whitespace(s) characters; true, '\t', "  "
OTEL_LOGRECORD_INDENT=false

# Timestamps layout. Can be applied for any standard codec.
# See [Time.Format](https://pkg.go.dev/time#pkg-constants).
OTEL_LOGRECORD_TIMESTAMP="Jan 02 15:04:05.000"

##################################################
###          Batch LogRecord Processor         ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#batch-logrecord-processor

# Delay interval (milliseconds) between two consecutive exports.
OTEL_BLRP_SCHEDULE_DELAY=1000

# Maximum allowed time (milliseconds) to export data.
OTEL_BLRP_EXPORT_TIMEOUT=30000

# Maximum queue size
OTEL_BLRP_MAX_QUEUE_SIZE=2048

# Maximum batch size
OTEL_BLRP_MAX_EXPORT_BATCH_SIZE=512

##################################################
###           Batch Span Processor             ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#batch-span-processor

# Delay interval (milliseconds) between two consecutive exports.
OTEL_BSP_SCHEDULE_DELAY=5000

# Maximum allowed time (milliseconds) to export data.
OTEL_BSP_EXPORT_TIMEOUT=30000

# Maximum queue size
OTEL_BSP_MAX_QUEUE_SIZE=2048

# Maximum batch size
# Must be less than or equal to OTEL_BSP_MAX_QUEUE_SIZE
OTEL_BSP_MAX_EXPORT_BATCH_SIZE=512

##################################################
###                Span Limits                 ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#span-limits

# Maximum allowed attribute value size.
# Default: no limit
OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT=

# Maximum allowed span attribute count
OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT=128

# Maximum allowed span event count
OTEL_SPAN_EVENT_COUNT_LIMIT=128

# Maximum allowed span link count
OTEL_SPAN_LINK_COUNT_LIMIT=128

# Maximum allowed attribute per span event count
OTEL_EVENT_ATTRIBUTE_COUNT_LIMIT=128

# Maximum allowed attribute per span link count
OTEL_LINK_ATTRIBUTE_COUNT_LIMIT=128

##################################################
###   Zipkin Exporter ; not implemented yet    ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#zipkin-exporter

# Endpoint for Zipkin traces.
; OTEL_EXPORTER_ZIPKIN_ENDPOINT=http://localhost:9411/api/v2/spans

# Maximum time (milliseconds) the Zipkin exporter will wait for each batch export.
; OTEL_EXPORTER_ZIPKIN_TIMEOUT=10000

##################################################
###  Prometheus Exporter ; not implemented yet ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#prometheus-exporter

# Host used by the Prometheus exporter
; OTEL_EXPORTER_PROMETHEUS_HOST=localhost

# Port used by the Prometheus exporter
; OTEL_EXPORTER_PROMETHEUS_PORT=9464

##################################################
### Metrics SDK Configuration ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#metrics-sdk-configuration

# Filter for which measurements can become Exemplars
OTEL_METRICS_EXEMPLAR_FILTER=trace_based

##################################################
###      Periodic exporting MetricReader       ###
##################################################
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#periodic-exporting-metricreader

# The time interval (milliseconds) between the start of two export attempts.
OTEL_METRIC_EXPORT_INTERVAL=60000

# Maximum allowed time (milliseconds) to export data.
OTEL_METRIC_EXPORT_TIMEOUT=30000

##################################################
###        OTLP Exporter Configuration         ###
##################################################
# https://opentelemetry.io/docs/languages/sdk-configuration/otlp-exporter/

# The transport protocol.
# See [Specify Protocol](https://opentelemetry.io/docs/specs/otel/protocol/exporter/#specify-protocol) for more details.
# grpc          ; to use OTLP/gRPC
# http/protobuf ; to use OTLP/HTTP + protobuf
# http/json     ; to use OTLP/HTTP + JSON
OTEL_EXPORTER_OTLP_PROTOCOL=grpc
; OTEL_EXPORTER_OTLP_LOGS_PROTOCOL=grpc
; OTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc
; OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=grpc

# Target to which the exporter is going to send spans, metrics, or logs.
# The option SHOULD accept any form allowed by the underlying gRPC client implementation.
# Additionally, the option MUST accept a URL with a scheme of either http or https.
# A scheme of https indicates a secure connection and takes precedence over the insecure configuration setting.
# A scheme of http indicates an insecure connection and takes precedence over the insecure configuration setting.
# If the gRPC client implementation does not support an endpoint with a scheme of http or https
# then the endpoint SHOULD be transformed to the most sensible format for that implementation.

#
# OTLP/gRPC
#
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
; OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://localhost:4317
; OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4317
; OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://localhost:4317

#
# OTLP/HTTP
#
; OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318
; OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://localhost:4318/v1/logs
; OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4318/v1/traces
; OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://localhost:4318/v1/metrics

# Whether to enable client transport security for the exporter's gRPC connection.
# This option only applies to OTLP/gRPC when an endpoint is provided without the http or https scheme.
# OTLP/HTTP always uses the scheme provided for the endpoint.
; OTEL_EXPORTER_OTLP_INSECURE=false
; OTEL_EXPORTER_OTLP_LOGS_INSECURE=false
; OTEL_EXPORTER_OTLP_TRACES_INSECURE=false
; OTEL_EXPORTER_OTLP_METRICS_INSECURE=false

# Maximum time the OTLP exporter will wait for each batch export.
OTEL_EXPORTER_OTLP_TIMEOUT=10000
; OTEL_EXPORTER_OTLP_LOGS_TIMEOUT=10000
; OTEL_EXPORTER_OTLP_TRACES_TIMEOUT=10000
; OTEL_EXPORTER_OTLP_METRICS_TIMEOUT=10000

# Key-value pairs to be used as headers associated with gRPC or HTTP requests.
# See [Specifying headers](https://opentelemetry.io/docs/specs/otel/protocol/exporter/#specifying-headers-via-environment-variables) for more details.
# Example: api-key=key,other-config-value=value
OTEL_EXPORTER_OTLP_HEADERS=
; OTEL_EXPORTER_OTLP_LOGS_HEADERS=
; OTEL_EXPORTER_OTLP_TRACES_HEADERS=
; OTEL_EXPORTER_OTLP_METRICS_HEADERS=

# The trusted certificate to use when verifying a server's TLS credentials.
# Should only be used for a secure connection.
OTEL_EXPORTER_OTLP_CERTIFICATE=
; OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE=
; OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE=
; OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE=

# Clients private key to use in TLS communication in PEM format.
OTEL_EXPORTER_OTLP_CLIENT_KEY=
; OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY=
; OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY=
; OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY=

# Client certificate/chain trust for clients private key to use in TLS communication in PEM format.
OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE=
; OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE=
; OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE=
; OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE=

# Compression key for supported compression types.
# Supported compression: gzip.
; OTEL_EXPORTER_OTLP_COMPRESSION=gzip
; OTEL_EXPORTER_OTLP_LOGS_COMPRESSION=gzip
; OTEL_EXPORTER_OTLP_TRACES_COMPRESSION=gzip
; OTEL_EXPORTER_OTLP_METRICS_COMPRESSION=gzip
